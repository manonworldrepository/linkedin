spring:
  application:
    name: linkedin
  security:
    oauth2:
      client:
        registration:
          linkedin:
            client-id: ${LINKEDIN_CLIENT_ID}
            client-secret: ${LINKEDIN_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/linkedin"
            scope: profile,openid,w_member_social,email
            client-authentication-method: client_secret_post
        provider:
          linkedin:
            authorization-uri: https://www.linkedin.com/oauth/v2/authorization
            token-uri: https://www.linkedin.com/oauth/v2/accessToken
            user-info-uri: https://api.linkedin.com/v2/userinfo
            user-name-attribute: sub
            jwk-set-uri: https://www.linkedin.com/oauth/openid/jwks

  session:
    store-type: redis
    redis:
      namespace: spring:session
    cookie:
      name: LISESSION
      secure: false
      http-only: true
      same-site: lax

  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}
      # password: ${SPRING_DATA_REDIS_PASSWORD:}

baseUrl: ${APP_BASE_URL:http://localhost:8080}

logging:
  level:
    root: INFO
    org.springframework.security: DEBUG
    org.springframework.session: DEBUG
    org.springframework.data.redis: DEBUG
    org.springframework.web: DEBUG
    reactor.netty.http.server: DEBUG
    reactor.netty.http.client: DEBUG